# -*- coding: utf-8 -*-
"""CUSTOMER_SEGMENTATION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Harish-1910/Data-Science-Projects/blob/main/CUSTOMER_SEGMENTATION.ipynb

importing the dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

"""data collection and analysis"""

# loading the data frame from csv customer file to a pandas data frame
customer_data=pd.read_csv('/Mall_Customers.csv')

# first five rows in the data set
customer_data.head()

#finding the number of rows and columns
customer_data.shape

#Getting some informations about the dataset
customer_data.info()

#checking for the missing value
customer_data.isnull().sum()

"""choosing annual income and spending score columns"""

x =customer_data.iloc[:,[3,4]].values

print(x)

"""choosing the number of clusters

WCSS -> Within Clusters and Sum Of Squares
"""

# finding WCSS values for different number of clusters

WCSS =[]

for i in range (1,11):
  kmeans =KMeans(n_clusters=i, init='k-means++', random_state=42)
  kmeans.fit(x)
  WCSS.append(kmeans.inertia_)

# plot an elbow graph

sns.set()
plt.plot(range(1,11),WCSS)
plt.title('The Elbow Point Graph')
plt.xlabel('Number Of Clusters')
plt.ylabel('WCSS')
plt.show()

"""optimum number of clusers =5

Training the K-means clustering model the unsupervised *model*
"""

kmeans=KMeans(n_clusters=5,init ='k-means++',random_state=0)
#return a label for each data point based on their clusters
Y = kmeans.fit_predict(x)
print(Y)

"""the 5 clusters are 0,1,2,3,4

visualizing all the clusters
"""

#plotting all clusters and their centroids

plt.figure(figsize=(8,8))
plt.scatter(x[Y==0,0],x[Y==0,1],s=50,c='magenta',label='cluster 1')
plt.scatter(x[Y==1,0],x[Y==1,1],s=50,c='cyan',label='cluster 2')
plt.scatter(x[Y==2,0],x[Y==2,1],s=50,c='red',label='cluster 3')
plt.scatter(x[Y==3,0],x[Y==3,1],s=50,c='blue',label='cluster 4')
plt.scatter(x[Y==4,0],x[Y==4,1],s=50,c='orange',label='cluster 5')

# plot the centroids
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1], s=100, c='black', label = 'Centroids')

plt.title('Customer Groups')
plt.xlabel('Annual income')
plt.ylabel('Spending Score')